# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1viTKOCgUDQ3U8piLW7DIRg3rw1U0Vsv4
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
# loading the dataset to a pandas DataFrame
credit_card_data=pd.read_csv('/content/creditcard.csv.zip')
# first 5 rows of the dataset
credit_card_data.head()

credit_card_data.tail()

# dataset informations
credit_card_data.info()

# checking the number of missing values in each column
credit_card_data.isnull().sum()

# distridution of legit transactions & fraudulent transactions
credit_card_data['Class'].value_counts()

"""This Dataset is highly unbalanced


0-->Normal Transactions

1-->fraudulent Tranactions

"""

# separating the data for analysis
legit=credit_card_data[credit_card_data.Class==0]
fraud=credit_card_data[credit_card_data.Class==1]
print(legit.shape)
print(fraud.shape)

# statistical measures of the data
legit.Amount.describe()

fraud.Amount.describe()

# compare the values for both transactions
credit_card_data.groupby('Class').mean()

"""Under-Sampling

Bulid a sample dataset containing similar distridutions of normal transactions and Fraudulent Transactions

Number of Frudulent Transactions-->492
"""

legit_sample=legit.sample(n=492)

"""Concatenating two DataFrames"""

new_dataset=pd.concat([legit_sample, fraud], axis=0)
new_dataset.head()

new_dataset.tail()

new_dataset['Class'].value_counts()

new_dataset.groupby('Class').mean()

"""Splitting the datainto Features & Targets"""

x=new_dataset.drop(columns='Class', axis=1)
y=new_dataset['Class']
print(x)

print(y)

"""Split the data into Training data & Testing Data

"""

x_train, x_test, y_train,  y_test=train_test_split(x,y,test_size=0.2, stratify=y, random_state=2)
print(x.shape,x_train.shape,x_test.shape)

"""Model Traning



Logistic Regression

"""

model=LogisticRegression()
model.fit(x_train,y_train)

